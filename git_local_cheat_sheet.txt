This file contains important git commands and can be revisited if necessary

SETTING user.name / email
git config --global user.email "sacha.van.weeren@gmail.com"
git config --global user.name "dikkiedik"

git config --list : lists all the user details 
git config user.name : returns the user name that was set
git config user.name "sappie" : if this command is called in a specific git directory only the user.name for this project is adjusted. (--global is not used)
git config --global core.editor "/usr/bin/nano"  : set the default editor to use

CREATE a local repository
git init : create a local repository
git init projectname : will create a new git directory 'projectname'
git init directoryname : turns an existing directory into a git directory

CLONE a repository
git clone url : to get a copy of a repository that already exists
git clone --local <location> <new_location> : to clone a local repository

ADD FILE - to be tracked
git add all_checks.py : adds a file to be tracked by git or adds it to stagin area
git add * :adds all files to the staging area

LIST of tracked files:
git ls-tree -r master --name-only

.GITIGNORE file
A file that can be used to define files that will be ignored. These files need to be commited in order to be tracked

HEAD:
Git use the HEAD alias to represent the currently checked-out snapshot of your project.

STATUS:
git status	: Shows status of the your project. 

DIFFERENCES:
git diff	  : Shows the difference in the files that have not been committed compared to last commit
git diff --staged : Shows the difference to staged but not committed files
git diff hash1 hash2 : gives difference in commits between commit of hash1 and hash2
git diff --summary hash1 hash2 : indicates the files that have changed between commits and omits the exact details.

git add -p	: show and approve each change before staging it

HISTORY of commits:
git log		: Shows history of all commits
git log -2	: Shows last 2 commits
git log -2 -p 	: Shows the details/differences of the last 2 commits
git log --stat 	: Show high level changes, e.g. number of instertion, number of files changes 
git log --since="4 days ago" : returns all commits submitted in the last 4 days
git log -S build : returns commits with the word "build"
git log --pretty=format:"%h - %an - %ar - %s" : print a summary in a user defined format
git log --graph : gives a more graphical view on the history of commits with branches
git log --oneline : gives condenses the information to one line per commit. The first line gives the hash we can use in git diff.
git log --oneline --graph: combine two commands

git shortlog -n -s -e: information of commits per author 

git show hashingkey : Show the changes for the commit with this hasing key 

SKIPPING the Staging Area:
git commit -a 	: adds all files that are tracked to the staging area
git commit -a -m "Commit text"

MOVING/DELITING FILES:
git rm filename		: similar to linux mv command
git mv oldname newname	: similar to linux rm command
git rm --cached filename : file will not be tracked but will not be deleted 

UNDOING CHANGES - before staging
git checkout all_check.py : restore the last available version of the file in the repository
git checkout -p all_check.py : asks if changes need to be saved or not
git checkout <commit hash> filename.py : replaces the filename.py with the version from a specific commit
git checkout HEAD~2 filename.py : replaces the filename.py with the version two commits before the current head
git checkout <commit hash> : replace all files in working directory with the ones from previous version

UNDOING CHANGES - after staging
git reset HEAD all_checks.py	: removes a file from the staging area and makes them untracked
git reset HEAD : removes all files from the staging area
git reset -p : asks which changes should be reset from the staging area

AMENDING COMMITS - overwrite the previous commit
if your commit is incomplete you can add a file and then type:
git commit --amend : amends the latest commit
the same commit can also be used to only change the message of the latest commit


ROLLBACKS
If you lates commit wasn't tested and introduces bugs you can rollback to an earlier commit
git revert : contains an inverse commit to discard unwanted changes
git revert HEAD : reverst to the previous commit

You can rollback to a specific commit by using the commit ID. The commit ID is the 40 
character string after the word commit in the 'git log'. The commit can normally be identified by about 8 characters of the commit ID.

you can inspect a commit with 
git show commit_ID
git revert commit_ID : reverts to the repository to that commit

GARBAGE COLLECTION:
once in a while you can clean up the repository for files that can not be reached and compress
git gc --prune : by default garbage collects items older than 2 weeks
git gc --auto :

git clean -n : see all untracked files
git clean -f : delete all untracked files

BRANCHES
git branch : shows a list of all available brances
git branch new_feature : creates a new_feature branch

git checkout new-feature : changes to the new-feature branch
git checkout -b new-branch : creates and changes to the new branch
git branch -d new-feature : to delete the branch new-feature

MERGING:
git merge new-feature : to merge to new-feature branch onto the master branch

CLONING A LOCAL REPOSITORY:
can be used to test things without messing up the repository. You can do work on a new feature
and once everything works you could create a branch for this new feature in your
main repository (why not use git branch directly?)
git clone <rep name> <copy name>


